{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","result","feedbackResult","options","question","name","values","calculateValue","bind","assertThisInitialized","renderResult","event","preventDefault","setState","scoreAddition","parseInt","target","value","_this2","map","_ref","react_default","a","createElement","type","onChange","_this$state","rel","href","onClick","window","location","reload","onSubmit","renderQuestions","drawResult","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d2d82d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      result: \"\",\n      feedbackResult: \"\",\n      options: [\n        {\n          question: \"Should children exist after parent delete?\",\n          name: \"delete_form\",\n          values: [2, 0]\n        },\n        {\n          question: \"Do you need to show children when quering parents often?\",\n          name: \"children_needed\",\n          values: [0, 2]\n        },\n        {\n          question: \"Does children are part of a snapshot?\",\n          name: \"children_snapshot\",\n          values: [0, 1]\n        },\n        {\n          question: \"Will children going to be a big collection?\",\n          name: \"big_collection\",\n          values: [1, 0]\n        }\n      ]\n    };\n    this.calculateValue = this.calculateValue.bind(this);\n    this.renderResult = this.renderResult.bind(this);\n  }\n\n  renderResult(event) {\n    event.preventDefault();\n    if (this.state.score >= 4) {\n      this.setState({\n        result: \"relationship\",\n        feedbackResult: \"go with relationship model\"\n      });\n    } else if (this.state.score >= 2 && this.state.score <= 3) {\n      this.setState({\n        result: \"unknow\",\n        feedbackResult: \"it is hard to say\"\n      });\n    } else if (this.state.score >= 0) {\n      this.setState({\n        result: \"embbed\",\n        feedbackResult: \"easy\"\n      });\n    }\n  }\n\n  calculateValue(event) {\n    const scoreAddition = parseInt(event.target.value);\n    this.setState({ score: this.state.score + scoreAddition });\n  }\n\n  renderQuestions() {\n    return this.state.options.map(({ question, name, values }) => (\n      <div>\n        <h3>{question}</h3>\n        <label>\n          <input\n            type=\"radio\"\n            name={name}\n            value={values[0]}\n            onChange={this.calculateValue}\n          />\n          Yes\n        </label>\n\n        <label>\n          <input\n            type=\"radio\"\n            name={name}\n            value={values[1]}\n            onChange={this.calculateValue}\n          />\n          No\n        </label>\n      </div>\n    ));\n  }\n\n  drawResult() {\n    const { result, feedbackResult } = this.state;\n\n    if (this.state.result) {\n      return (\n        <div>\n          <p>\n            You should choose <h2>{result}</h2>\n          </p>\n          <p>{feedbackResult}</p>\n          <h3>\n            A good rule of thumb Rule of thumb: if the amount of data to\n            transfer doesn't affect your client experience and the number of\n            subdocuments has a numerical limit, go embedded, otherwise\n            relationship.\n          </h3>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>\n          Using this{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://coderwall.com/p/px3c7g/mongodb-schema-design-embedded-vs-references\"\n          >\n            doc\n          </a>{\" \"}\n          as reference\n        </p>\n        <h1>\n          Embbeded vs Reference quizz\n          <button\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Start over\n          </button>\n        </h1>\n\n        <form onSubmit={this.renderResult}>\n          {this.renderQuestions()}\n          <input type=\"submit\" value=\"calculate\" />\n          {this.drawResult()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}